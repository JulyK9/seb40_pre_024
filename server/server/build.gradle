plugins {
    id 'org.springframework.boot' version '2.7.5'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'java'

    id "org.asciidoctor.jvm.convert" version "3.3.2" //rest docs
}

group = 'com.pre-project'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

configurations {
    asciidoctorExt
}


dependencies {

    //JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    //WEB
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'


    //test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //유효성 관련
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //Json Mapper
    implementation 'com.google.code.gson:gson:2.9.0'

    //MapStruct
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

    //JWT 관련
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly	'io.jsonwebtoken:jjwt-jackson:0.11.5'


    //My Sql 서버용
//    implementation 'mysql:mysql-connector-java'

    //H2 로컬용
    runtimeOnly 'com.h2database:h2'

    //Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    //rest docs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

//rest docs
ext {
    snippetsDir = file('build/generated-snippets') //스니핏이 생성될 경로를 변수에 할당
}

tasks.named('test') {
    outputs.dir snippetsDir //rest docs, test task 작동할때 생성되는 스니핏의 저장 경로를 snippetsDir 에 저장된 경로로 설정하겠다
    useJUnitPlatform()
}

asciidoctor { //실제 스니핏 asciidoc 문서를 만드는 task
    configurations 'asciidoctorExt' //구성 설정
    inputs.dir snippetsDir //해당 작업의 input 디렉토리를 snippetsDir로 하겠다. 즉, test task의 결과물이 asciidoctor task의 인풋이다
    dependsOn test //test task가 먼저 시작되고 해당 task가 돌아간다 (즉, 의존하겠다)
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    println "asciidoctor output: ${asciidoctor.outputDir}"
    from file("${asciidoctor.outputDir}")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}